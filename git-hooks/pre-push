#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
HAS_WIP=0
OLDEST_WIP=0
while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list --parents -n 1 $(git log --pretty=format:%s-%H $range | grep -oP 'wip:.*-\K(.*)' | tail -1) | grep -oP '.* \K.*')
		if test -n "$commit"
		then
			HAS_WIP=1
			OLDEST_WIP=$commit
		fi
	fi
done

if [ $HAS_WIP -eq 1 ]
then
	echo >&2 "Found wip commit in local commit history, will not push commits"
	echo >&2 "To Rebase branch so you can remove commits use this command"
	echo >&2 "git rebase -i ${OLDEST_WIP}^1"
	echo >&2 "or reset branch to commit and selectivly stage working dir to create git history"
	echo >&2 "git reset ${OLDEST_WIP}"
	exit 1
fi
exit 0
